# Problem: Minimize Malware Spread - https://leetcode.com/problems/minimize-malware-spread/

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        def find(x):
            if x == parent[x]:
                return x
            parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            parentX = find(x)
            parentY = find(y)
            if parentX != parentY:
                if rank[parentX] > rank[parentY]:
                    parent[parentY] = parentX
                elif rank[parentX] < rank[parentY]:
                    parent[parentX] = parentY
                else:
                    parent[parentX] = parentY
                    rank[parentY] += 1

        n = len(graph)

        parent = [i for i in range(n)]
        rank = [1] * n
        malware = [0] * n
        for init in initial:
            malware[init] = 1

        for i in range(n):
            for j in range(i+1, n):
                if graph[i][j] == 1 and (malware[i] or malware[j]):
                    union(i,j)
                    malware[i] = 1
                    malware[j] = 1
        
        ctr = defaultdict(int)
        for i in range(n):
            ctr[find(i)] += 1  

        ctr1 = defaultdict(int)
        for init in initial:
            ctr1[find(init)] += 1  
        return min(initial, key=lambda i: [(ctr1[find(i)] == 1) * -ctr[find(i)], i])